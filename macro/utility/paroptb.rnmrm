macarg start end step dstrec param opt1 opt2

; check for presence of required macros:
tst lcl ramp
  lclarg rampreq setrampb
endtst
macro reqchk
reqchk mtools &rampreq
  rtnarg &error
tst eq &error 1
  mexit
endtst

setidn >>idn0,>>idn1
setidn "&macro$",*
unit /time >>tunits
unit /time usec
onerr .exit

tst lcl ramp
  msg "Paropt /ramp 1.start 2.end 3.step 4.record 5.name 6.channel 7.width"
  dflt  START,20,"Enter starting value"
  dflt  END,80,"Enter end value"
  dflt  STEP,5,"Enter step size"
  ptra >>rdrec >>wrrec
  mtools targetrec &wrrec &dstrec
    rtnarg dstrec
  dflt  PARAM,cpdly,"Enter pulse name"
  DFLT  opt1,1,"Enter channel"
  DFLT  opt2,10,"Enter ramp size"
endtst

tst /false lcl param
  msg "Paropt 1.start 2.end 3.step 4.record 5.parameter 6.channel 7.number"

  dflt  START,1,"Enter starting value"
  dflt  END,2,"Enter end value"
  dflt  STEP,1,"Enter step size"
  ptra >>rdrec >>wrrec
  mtools targetrec &wrrec &dstrec
    rtnarg dstrec
  dflt  PARAM,RD,"Enter parameter to change"
  DFLT  opt1,-1,"Enter channel/index [-1 if unneeded]"
  tst eq &opt1 -1
    lcldl opt1
  elstst
    DFLT  opt2 -1 "Enter index [-1 if unneeded]"
    tst eq &opt2 -1
      lcldl opt2
    endtst
  endtst
endtst

calc (&end-&start)/&step+1 >>steps
calc /ndec=4 (&steps-1)*&step+&start >>endpnt
tst eq &param LS ;LS values must be integers so use calc to truncate endpnt
  calc /ndec=-1 &endpnt >>endpnt
endtst
msg "The final value will be &ENDPNT"

; allocating destination record and setting parameters for second dimension
size >>sizeaa

mtools targetrec 5 &dstrec
allb &DSTREC 2 &sizeaa &STEPS 1

set rec &DSTREC,2,DIM,2
set rec &DSTREC,2,DOM,UNKN
set rec &DSTREC,2,SYN,1
set rec &DSTREC,2,FIRST,&START
set rec &DSTREC,2,STEP,&STEP
set rec &DSTREC,2,ACQTYP,REAL

tst lcl ramp
  titlea "Paropt, &param&opt1 width &opt2, &START - &ENDPNT - by &STEP &note"
  pwx &opt1 &param&opt1'v1' >>initialbeg
  pwx &opt1 &param&opt1'v2' >>initialend
elstst
  titlea "Paropt, &PARAM &opt1 &opt2, &START - &ENDPNT - by &STEP &note"
  &PARAM &opt1 &opt2 >>initial
endtst

DO /LCL 1, &STEPS, LNR
  calc /ndec=4 (&lnr-1)*&step+&start >>cur
  ; Make sure LOOP/LS values are integers:
  tst eq &param LS
    calc /ndec=-1 &cur >>cur
  endtst
  tst lcl ramp
    setrampb &param &opt1 &cur &opt2
  elstst
    &param &opt1 &opt2 &cur
  endtst
  tst lcl ppupdate
    ppupdate
  endtst
  setidn "&macro$","&lnr / &steps"
  set info lcl pretime
    date /epoch
  ; optional delay before each acq
  tst lcl wttim
    msg "waiting &wttim sec..."
    wttim &wttim
  endtst
  DOB2B &DSTREC
  set info lcl posttime
    date /epoch

  calci &posttime-&pretime >>secs

  msg "measurement took &secs secs"

  calc /ndec=1 (&steps-&lnr)*&secs/60 >>minutes
  calc &minutes/60 >>hrs
  calc /ndec=2 &minutes 60 mod >>minutes

  tst lcl ramp
    msg "&PARAM&opt1 &CUR &opt2 done. Rec: &DSTREC -
    Remaining: &hrs hrs &minutes min."
  elstst
    tst eq &param rd
      msg "&PARAM &opt1 &opt2 = &CUR done. Rec: &DSTREC"
    elstst
      msg "&PARAM &opt1 &opt2 = &CUR done. Rec: &DSTREC -
      Remaining: &hrs hrs &minutes min."
    endtst
  endtst
ENDDO

; reset value to original:
tst lcl ramp
  pwxex &opt1 >>expname
  pwx &opt1 &param&opt1'v1' &initialbeg
  pwx &opt1 &param&opt1'v2' &initialend
  tst /false eq "&expname" ""
    pwxex &opt1 &expname
  endtst
elstst
  &param &opt1 &opt2 &initial
endtst

savarv 1

.exit
setidn &idn0,&idn1
unit /time &tunits
mexit
